// #Sireum

package firewall.SW

import org.sireum._
import art.Art
import firewall._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait ArduPilot_Impl_ArduPilot_ArduPilot_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.seL4_Impl_Instance_ArduPilot_ArduPilot)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.seL4_Impl_Instance_ArduPilot_ArduPilot)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.seL4_Impl_Instance_ArduPilot_ArduPilot)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.seL4_Impl_Instance_ArduPilot_ArduPilot)
  }

  /** helper function to set the values of all input ports.
   * @param EthernetFramesRx payloads for event data port EthernetFramesRx.
   *   ART currently supports single element event data queues so
   *   only the last element of EthernetFramesRx will be used
   */
  def put_concrete_inputs(EthernetFramesRx : ISZ[SW.RawEthernetMessage]): Unit = {
    for(v <- EthernetFramesRx){
      put_EthernetFramesRx(v)
    }
  }


  // setter for in EventDataPort
  def put_EthernetFramesRx(value : SW.RawEthernetMessage): Unit = {
    Art.insertInInfrastructurePort(Arch.seL4_Impl_Instance_ArduPilot_ArduPilot.operational_api.EthernetFramesRx_Id, SW.RawEthernetMessage_Payload(value))
  }

}
