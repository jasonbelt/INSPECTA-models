#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

// Do not edit this file as it will be overwritten if codegen is rerun

#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum base_SW_InternetProtocol_Type {
  IPV4 = 0,
  IPV6 = 1
}

#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum base_SW_FrameProtocol_Type {
  TCP = 0,
  ARP = 1
}

#[repr(C)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum base_SW_ARP_Type_Type {
  REQUEST = 0,
  REPLY = 1,
  NA = 2
}

pub const base_SW_RawEthernetMessage_SIZE: usize = 1600;
pub const base_SW_RawEthernetMessage_DIM: usize = 1600;

pub type base_SW_RawEthernetMessage = [cty::uint8_t; base_SW_RawEthernetMessage_DIM];

#[repr(C)]
#[derive(Debug, Clone, Copy)]
pub struct base_SW_StructuredEthernetMessage_i {
  pub malformedFrame: bool,
  pub internetProtocol: base_SW_InternetProtocol_Type,
  pub frameProtocol: base_SW_FrameProtocol_Type,
  pub portIsWhitelisted: bool,
  pub arpType: base_SW_ARP_Type_Type,
  pub rawMessage: base_SW_RawEthernetMessage
}
