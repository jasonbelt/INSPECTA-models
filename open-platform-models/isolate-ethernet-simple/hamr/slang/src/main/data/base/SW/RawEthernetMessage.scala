// #Sireum

package base.SW

import org.sireum._
import base._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object RawEthernetMessage {
  // Import I's interpolator to create instances of I.  For e.g.,
  //   import SW.RawEthernetMessage.I._
  //   object Example {
  //     val value: SW.RawEthernetMessage.I = i"0"
  //     ...
  //
  // Rename I and use its fromZ method when using multiple <array-def>.I indexing types in the same context.  For e.g.
  //   import SW.RawEthernetMessage.{I => I0}
  //   import <other-array-def>.{I => I1}
  //   object Example {
  //     val value: SW.RawEthernetMessage.I = I0.fromZ(0)
  //     ...

  @range(min = 0, max = 1599, index = T) class I

  def example(): SW.RawEthernetMessage = {
    return SW.RawEthernetMessage(
      value = IS.create[I, Base_Types.Unsigned_8](1600, Base_Types.Unsigned_8_example()))
  }
}

@datatype class RawEthernetMessage(
  val value: IS[RawEthernetMessage.I, U8]) {
}

object RawEthernetMessage_Payload {
  def example(): RawEthernetMessage_Payload = {
    return RawEthernetMessage_Payload(SW.RawEthernetMessage.example())
  }
}

@datatype class RawEthernetMessage_Payload(value: SW.RawEthernetMessage) extends art.DataContent
