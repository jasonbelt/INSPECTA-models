// #Sireum
package base.runtimemonitor

import org.sireum._
import base._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object ModelInfo {
  val ArduPilot_Impl_seL4_ArduPilot_ArduPilot_MI : Component =
    Component(
      name = "ArduPilot_Impl_seL4_ArduPilot_ArduPilot",
      id = Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "EthernetFramesRx",
          id = Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot.EthernetFramesRx.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "EthernetFramesTx",
          id = Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot.EthernetFramesTx.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = "")))

  val Firewall_Impl_seL4_Firewall_Firewall_MI : Component =
    Component(
      name = "Firewall_Impl_seL4_Firewall_Firewall",
      id = Arch.ZCU102_Impl_Instance_seL4_Firewall_Firewall.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "EthernetFramesRxIn",
          id = Arch.ZCU102_Impl_Instance_seL4_Firewall_Firewall.EthernetFramesRxIn.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "EthernetFramesTxIn",
          id = Arch.ZCU102_Impl_Instance_seL4_Firewall_Firewall.EthernetFramesTxIn.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = ""),
        Port(
          name = "EthernetFramesRxOut",
          id = Arch.ZCU102_Impl_Instance_seL4_Firewall_Firewall.EthernetFramesRxOut.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "EthernetFramesTxOut",
          id = Arch.ZCU102_Impl_Instance_seL4_Firewall_Firewall.EthernetFramesTxOut.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = "")))

  val LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MI : Component =
    Component(
      name = "LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver",
      id = Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.id.toZ,
      dispatchProtocol = iDispatchProtocol.Periodic,
      state = ISZ(
        Port(
          name = "EthernetFramesRx",
          id = Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.EthernetFramesRx.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.Out,
          slangType = ""),
        Port(
          name = "EthernetFramesTx",
          id = Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.EthernetFramesTx.id.toZ,
          kind = PortKind.EventData,
          direction = StateDirection.In,
          slangType = "")))

  val modelInfo: ModelInfo =
    ModelInfo(ISZ(
     ArduPilot_Impl_seL4_ArduPilot_ArduPilot_MI,
     Firewall_Impl_seL4_Firewall_Firewall_MI,
     LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_MI))
}

@datatype class ModelInfo(val components: ISZ[Component])

@datatype class Component(val name: String,
                          val id: Z,
                          val dispatchProtocol: iDispatchProtocol.Type,
                          val state: ISZ[StateElement])

@enum object iDispatchProtocol {
  "Sporadic"
  "Periodic"
}

@enum object StateDirection {
  "In"
  "Out"
}

@sig trait StateElement {
  def name: String

  def id: Z

  def slangType: String

  def direction: StateDirection.Type
}

@enum object PortKind {
  "Data"
  "Event"
  "EventData"
}

@datatype class Port(val name: String,
                     val id: Z,
                     val kind: PortKind.Type,
                     val direction: StateDirection.Type,
                     val slangType: String) extends StateElement

@datatype class StateVariable(val name: String,
                              val id: Z,
                              val direction: StateDirection.Type,
                              val slangType: String) extends StateElement
