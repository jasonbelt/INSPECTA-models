// #Sireum

package base.SW

import org.sireum._
import art.Art
import base._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun
@msig trait ArduPilot_Impl_seL4_ArduPilot_ArduPilot_TestApi {

  def BeforeEntrypoint(): Unit = {
    Art.initTest(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot)
  }

  def AfterEntrypoint(): Unit = {
    Art.finalizeTest(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot)
  }

  def testCompute(): Unit = {
    Art.manuallyClearOutput()
    Art.testCompute(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot)
  }

  def testInitialise(): Unit = {
    Art.manuallyClearOutput()
    Art.testInitialise(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot)
  }

  /** helper function to set the values of all input ports.
   * @param EthernetFramesRx payloads for event data port EthernetFramesRx.
   *   ART currently supports single element event data queues so
   *   only the last element of EthernetFramesRx will be used
   */
  def put_concrete_inputs(EthernetFramesRx : ISZ[SW.StructuredEthernetMessage_i]): Unit = {
    for(v <- EthernetFramesRx){
      put_EthernetFramesRx(v)
    }
  }


  /** helper function to check ArduPilot_Impl_seL4_ArduPilot_ArduPilot's
   * output ports.  Use named arguments to check subsets of the output ports.
   * @param EthernetFramesTx method that will be called with the payloads to be sent
   *        on the outgoing event data port 'EthernetFramesTx'.
   */
  def check_concrete_output(EthernetFramesTx: ISZ[SW.StructuredEthernetMessage_i] => B): Unit = {
    var testFailures: ISZ[ST] = ISZ()

    var EthernetFramesTxValue: ISZ[SW.StructuredEthernetMessage_i] = ISZ()
    // TODO: event data port getter should return all of the events/payloads
    //       received on event data ports when queue sizes > 1 support is added
    //       to ART
    if(get_EthernetFramesTx().nonEmpty) { EthernetFramesTxValue = EthernetFramesTxValue :+ get_EthernetFramesTx().get }
    if(!EthernetFramesTx(EthernetFramesTxValue)) {
      testFailures = testFailures :+ st"'EthernetFramesTx' did not match expected: received ${EthernetFramesTxValue.size} events with the following payloads ${EthernetFramesTxValue}"
    }

    assert(testFailures.isEmpty, st"${(testFailures, "\n")}".render)
  }


  // setter for in EventDataPort
  def put_EthernetFramesRx(value : SW.StructuredEthernetMessage_i): Unit = {
    Art.insertInInfrastructurePort(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot.operational_api.EthernetFramesRx_Id, SW.StructuredEthernetMessage_i_Payload(value))
  }

  // getter for out EventDataPort
  def get_EthernetFramesTx(): Option[SW.StructuredEthernetMessage_i] = {
    val value: Option[SW.StructuredEthernetMessage_i] = get_EthernetFramesTx_payload() match {
      case Some(SW.StructuredEthernetMessage_i_Payload(v)) => Some(v)
      case Some(v) => halt(s"Unexpected payload on port EthernetFramesTx.  Expecting 'SW.StructuredEthernetMessage_i_Payload' but received ${v}")
      case _ => None[SW.StructuredEthernetMessage_i]()
    }
    return value
  }

  // payload getter for out EventDataPort
  def get_EthernetFramesTx_payload(): Option[SW.StructuredEthernetMessage_i_Payload] = {
    return Art.observeOutInfrastructurePort(Arch.ZCU102_Impl_Instance_seL4_ArduPilot_ArduPilot.initialization_api.EthernetFramesTx_Id).asInstanceOf[Option[SW.StructuredEthernetMessage_i_Payload]]
  }

}
