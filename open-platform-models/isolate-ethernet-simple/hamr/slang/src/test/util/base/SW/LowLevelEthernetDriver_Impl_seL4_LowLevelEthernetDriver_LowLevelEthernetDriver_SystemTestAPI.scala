// #Sireum

package base.SW

import org.sireum._
import art._
import base.SystemTestSuiteSlang.runtimeMonitorStream
import base._

// Do not edit this file as it will be overwritten if HAMR codegen is rerun

object LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_SystemTestAPI {
  /** helper method to set the values of all incoming ports
    * @param api_EthernetFramesTx incoming event data port
    */
  def put_concrete_inputs(api_EthernetFramesTx: Option[SW.StructuredEthernetMessage_i]): Unit = {
    put_EthernetFramesTx(api_EthernetFramesTx)
  }

  // setter for incoming event data port
  def put_EthernetFramesTx(value: Option[SW.StructuredEthernetMessage_i]): Unit = {
    value match {
      case Some(v) => Art.insertInInfrastructurePort(Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.operational_api.EthernetFramesTx_Id, SW.StructuredEthernetMessage_i_Payload(v))
      case _ =>
    }
  }

  def fetchContainer(): base.SW.LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS = {
    if (runtimeMonitorStream.contains(Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.id)) {
      val (_, postContainer_) = runtimeMonitorStream.get(Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.id).get
      return postContainer_.asInstanceOf[base.SW.LowLevelEthernetDriver_Impl_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver_PostState_Container_PS]
    }
    else {
      assert(F, s"No post state recorded for ${Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.name}")
      halt(s"No post state recorded for ${Arch.ZCU102_Impl_Instance_seL4_LowLevelEthernetDriver_LowLevelEthernetDriver.name}")
    }
  }

  def check_concrete_outputs(api_EthernetFramesRx: Option[SW.StructuredEthernetMessage_i]): Unit = {
    var failureReasons: ISZ[ST] = ISZ()

    val actual_EthernetFramesRx = get_api_EthernetFramesRx()
    if (api_EthernetFramesRx != actual_EthernetFramesRx) {
      failureReasons = failureReasons :+ st"'EthernetFramesRx' did not match expected.  Expected: $api_EthernetFramesRx, Actual: $actual_EthernetFramesRx"
    }

    assert(failureReasons.isEmpty, st"${(failureReasons, "\n")}".render)
  }

  def get_api_EthernetFramesRx(): Option[SW.StructuredEthernetMessage_i] = {
    return fetchContainer().api_EthernetFramesRx
  }
}