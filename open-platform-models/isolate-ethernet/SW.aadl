package SW
public
	
	with CASE_Scheduling;
	
	thread LowLevelEthernetDriver
		features 
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface. 	  
			EthernetFramesRx: out data port;
			EthernetFramesTx: in data port;
	end LowLevelEthernetDriver;
	
	thread implementation LowLevelEthernetDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/LowLevelEthernetDriver.rs");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
	end LowLevelEthernetDriver.Impl;
  
  	process LowLevelEthernetDriver_seL4
  		features 
			-- Ethernet Frames: Raw Ethernet frames received from the physical network interface.
			EthernetFramesRx: out data port;
			EthernetFramesTx: in data port;			
  	end LowLevelEthernetDriver_seL4;
  	
  	process implementation LowLevelEthernetDriver_seL4.Impl
  		subcomponents
  			LowLevelEthernetDriver: thread LowLevelEthernetDriver.Impl;
  		connections
  			c1: port EthernetFramesTx -> LowLevelEthernetDriver.EthernetFramesTx;
  			c2: port LowLevelEthernetDriver.EthernetFramesRx -> EthernetFramesRx;
  		properties
  			CASE_Scheduling::Domain => 2;
  	end LowLevelEthernetDriver_seL4.Impl;
  	
  	thread TxVirt
  		features
  			ARP: in data port;
  			Input: in data port;
  			Output: out data port;
  	end TxVirt;
  	
  	thread implementation TxVirt.Impl
  		properties
  			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/TxVirt.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
  	end TxVirt.Impl;
  	
  	process TxVirt_seL4
  		features
  			ARP: in data port;
  			Input: in data port;
  			Output: out data port;
  	end TxVirt_seL4;
  
  	process implementation TxVirt_seL4.Impl
  		subcomponents
  			TxVirt: thread TxVirt.Impl;
  		connections
  			c1: port ARP -> TxVirt.ARP;
  			c2: port Input -> TxVirt.Input;
  			c3: port TxVirt.Output -> Output;
  		properties
  			CASE_Scheduling::Domain => 3;
  	end TxVirt_seL4.Impl;
  
  
  	thread RxVirt
  		features
  			Input: in data port;
  			ARP: out data port;
  			Output: out data port;
  	end RxVirt;
  
  	thread implementation RxVirt.Impl
  		properties
	  		Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/RxVirt.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
  	end RxVirt.Impl;
  
  	process RxVirt_seL4
  		features
  			Input: in data port;
  			ARP: out data port;
  			Output: out data port;
  	end RxVirt_seL4;
  	
  	process implementation RxVirt_seL4.Impl
  		subcomponents
  			RxVirt: thread RxVirt.Impl;
  		connections
  			c1: port Input -> RxVirt.Input;
  			c2: port RxVirt.ARP -> ARP;
  			c3: port RxVirt.Output -> Output;
  		properties
  			CASE_Scheduling::Domain => 4;
  	end RxVirt_seL4.Impl;
  	
  	thread ARP
  		features
  			Input: in data port;
  			Output: out data port;
  	end ARP;
  
  	thread implementation ARP.Impl
  		properties
	  		Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/ARP.c");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
  	end ARP.Impl;
  
  	process ARP_seL4
  		features
  			Input: in data port;
  			Output: out data port;
  	end ARP_seL4;
  
  	process implementation ARP_seL4.Impl
  		subcomponents
  			ARP: thread ARP.Impl;
  		connections
  			c1: port Input -> ARP.Input;
  			c2: port ARP.Output -> Output;
  		properties
  			CASE_Scheduling::Domain => 5;
  	end ARP_seL4.Impl;
  
	thread Firewall
		features 
			EthernetFramesRxIn: in data port;
			EthernetFramesTxIn: in data port;
			EthernetFramesRxOut: out data port;
			EthernetFramesTxOut: out data port;
	end Firewall;
	
	thread implementation Firewall.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Stack_size => 1048576 Bytes;
			Source_Text => ("src/Firewall.rs");
			Initialize_Entrypoint_Source_Text => "init";
			Compute_Entrypoint_Source_Text => "compute";
	end Firewall.Impl;
	
	process Firewall_seL4
		features 
			EthernetFramesRxIn: in data port;
			EthernetFramesTxIn: in data port;
			EthernetFramesRxOut: out data port;
			EthernetFramesTxOut: out data port;
	end Firewall_seL4;
	
	process implementation Firewall_seL4.Impl
		subcomponents
			Firewall: thread Firewall.Impl;
		connections
			c1: port EthernetFramesRxIn -> Firewall.EthernetFramesRxIn;
			c2: port EthernetFramesTxIn -> Firewall.EthernetFramesTxIn;
			c3: port Firewall.EthernetFramesRxOut -> EthernetFramesRxOut;
			c4: port Firewall.EthernetFramesTxOut -> EthernetFramesTxOut;
		properties
  			CASE_Scheduling::Domain => 6;
	end Firewall_seL4.Impl;  
	
	thread ArduPilot
		features
			EthernetFramesRx: in data port;
			EthernetFramesTx: out data port;
	end ArduPilot;
	
	thread implementation ArduPilot.Impl
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
	end ArduPilot.Impl;
	
	process ArduPilot_seL4
		features
			EthernetFramesRx: in data port;
			EthernetFramesTx: out data port;
	end ArduPilot_seL4;
		
	process implementation ArduPilot_seL4.Impl
		subcomponents
			ArduPilot: thread ArduPilot.Impl;
		connections
			c1: port EthernetFramesRx -> ArduPilot.EthernetFramesRx;
			c2: port ArduPilot.EthernetFramesTx -> EthernetFramesTx;
		properties
  			CASE_Scheduling::Domain => 7;
	end ArduPilot_seL4.Impl;
		
		
	system seL4

	end seL4;
	
	system implementation seL4.Impl
		subcomponents
			LowLevelEthernetDriver: process LowLevelEthernetDriver_seL4.Impl;
			RxVirt: process RxVirt_seL4.Impl;
			TxVirt: process TxVirt_seL4.Impl;
			ARP: process ARP_seL4.Impl;
			Firewall: process Firewall_seL4.Impl;
			ArduPilot: process ArduPilot_seL4.Impl;
		connections	
			-- Incoming traffic
			c1: port LowLevelEthernetDriver.EthernetFramesRx -> RxVirt.Input;
			c2: port RxVirt.ARP -> ARP.Input;
			c3: port RxVirt.Output -> Firewall.EthernetFramesRxIn;
			c4: port Firewall.EthernetFramesRxOut -> ArduPilot.EthernetFramesRx;
			-- Outgoing traffic
			c5: port ArduPilot.EthernetFramesTx -> Firewall.EthernetFramesTxIn;
			c6: port Firewall.EthernetFramesTxOut -> TxVirt.Input;
			c7: port ARP.Output -> TxVirt.ARP;
			c8: port TxVirt.Output -> LowLevelEthernetDriver.EthernetFramesTx;		
	end seL4.Impl;
	
end SW;