// Do not edit this file as it will be overwritten if codegen is rerun

use crate::bridge::extern_c_api as extern_api;
use data::*;

#[cfg(test)]
pub fn put_upper_alarm_temp(value: Isolette_Data_Model::Temp_i) 
 {
   *extern_api::IN_upper_alarm_temp.lock().unwrap() = Some(value)
 }

#[cfg(test)]
pub fn put_lower_alarm_temp(value: Isolette_Data_Model::Temp_i) 
 {
   *extern_api::IN_lower_alarm_temp.lock().unwrap() = Some(value)
 }

#[cfg(test)]
pub fn get_alarm_control() -> Isolette_Data_Model::On_Off 
 {
   return extern_api::OUT_alarm_control.lock().unwrap().expect("Not expecting None")
 }

#[cfg(test)]
pub fn put_monitor_mode(value: Isolette_Data_Model::Monitor_Mode) 
 {
   *extern_api::IN_monitor_mode.lock().unwrap() = Some(value)
 }

#[cfg(test)]
pub fn put_current_tempWstatus(value: Isolette_Data_Model::TempWstatus_i) 
 {
   *extern_api::IN_current_tempWstatus.lock().unwrap() = Some(value)
 }

#[cfg(test)]
pub fn get_lastCmd() -> Isolette_Data_Model::On_Off 
 {
   unsafe {
     match &crate::app {
       Some(inner) => inner.lastCmd,
       None => panic!("The app is None")
     }
   }
 }

#[cfg(test)]
pub fn put_lastCmd(value: Isolette_Data_Model::On_Off) 
 {
   unsafe {
     match &mut crate::app {
       Some(inner) => inner.lastCmd = value,
       None => panic!("The app is None")
     }
   }
 }