#![cfg_attr(not(test), no_std)]

#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

#![allow(dead_code)]
#![allow(static_mut_refs)]
#![allow(unused_unsafe)]
#![allow(unused_imports)]
#![allow(unused_variables)]
#![allow(unused_parens)]

// Do not edit this file as it will be overwritten if codegen is rerun

mod bridge;
mod component;
mod data;
mod logging;
mod tests;

use crate::bridge::thermostat_rt_mri_mri_api::{self as api, *};
use crate::component::thermostat_rt_mri_mri_app::*;
use data::*;

#[cfg(feature = "sel4")]
#[allow(unused_imports)]
use log::{error, warn, info, debug, trace};

static mut app: Option<thermostat_rt_mri_mri> = None;
static mut init_api: thermostat_rt_mri_mri_Application_Api<thermostat_rt_mri_mri_Initialization_Api> = api::init_api();
static mut compute_api: thermostat_rt_mri_mri_Application_Api<thermostat_rt_mri_mri_Compute_Api> = api::compute_api();

#[no_mangle]
pub extern "C" fn thermostat_rt_mri_mri_initialize() {
  #[cfg(not(test))]
  #[cfg(feature = "sel4")]
  logging::LOGGER.set().unwrap();

  unsafe {
    let mut _app = thermostat_rt_mri_mri::new();
    _app.initialize(&mut init_api);
    app = Some(_app);
  }
}

#[no_mangle]
pub extern "C" fn thermostat_rt_mri_mri_timeTriggered() {
  unsafe {
    if let Some(_app) = app.as_mut() {
      _app.timeTriggered(&mut compute_api);
    } else {
      panic!("Unexpected: app is None");
    }
  }
}

#[no_mangle]
pub extern "C" fn thermostat_rt_mri_mri_notify(channel: microkit_channel) {
  unsafe {
    if let Some(_app) = app.as_mut() {
      _app.notify(channel);
    } else {
      panic!("Unexpected: app is None");
    }
  }
}

// Need a Panic handler in a no_std environment
#[panic_handler]
#[cfg(feature = "sel4")]
#[cfg(not(test))]
fn panic(info: &core::panic::PanicInfo) -> ! {
  error!("PANIC: {info:#?}");
  loop {}
}

fn main() {
  // TODO: required by Verus CLI (i.e. 'verus src/lib.rs')
}
