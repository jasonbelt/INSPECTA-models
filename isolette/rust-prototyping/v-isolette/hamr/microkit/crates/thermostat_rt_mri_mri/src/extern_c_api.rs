#![allow(dead_code)]
#![allow(non_snake_case)]

//! C-interface for the component.
//! This code must be unsafe.
//! Assumptions about correctness are introduced and need to verified by other means.

#[cfg(test)]
use std::sync::Mutex;

// Do not edit this file as it will be overwritten if codegen is rerun

use types::Isolette_Data_Model::*;

#[cfg(not(test))]
extern "C" {
  pub fn put_upper_desired_temp(data: *mut Temp_i) -> bool;
  pub fn put_lower_desired_temp(data: *mut Temp_i) -> bool;
  pub fn put_displayed_temp(data: *mut Temp_i) -> bool;
  pub fn put_regulator_status(data: *mut Status) -> bool;
  pub fn put_interface_failure(data: *mut Failure_Flag_i) -> bool;

  pub fn get_regulator_mode(data: *mut Regulator_Mode) -> bool;
  pub fn get_lower_desired_tempWstatus(data: *mut TempWstatus_i) -> bool;
  pub fn get_upper_desired_tempWstatus(data: *mut TempWstatus_i) -> bool;
  pub fn get_current_tempWstatus(data: *mut TempWstatus_i) -> bool;
}

pub fn unsafe_put_upper_desired_temp(data: &Temp_i) -> bool {
  let mut value: Temp_i = *data;
  let valptr: *mut Temp_i = &mut value;
  unsafe {
    return put_upper_desired_temp(valptr);
  }
}

pub fn unsafe_put_lower_desired_temp(data: &Temp_i) -> bool {
  let mut value: Temp_i = *data;
  let valptr: *mut Temp_i = &mut value;
  unsafe {
    return put_lower_desired_temp(valptr);
  }
}

pub fn unsafe_put_displayed_temp(data: &Temp_i) -> bool {
  let mut value: Temp_i = *data;
  let valptr: *mut Temp_i = &mut value;
  unsafe {
    return put_displayed_temp(valptr);
  }
}

pub fn unsafe_put_regulator_status(data: &Status) -> bool {
  let mut value: Status = *data;
  let valptr: *mut Status = &mut value;
  unsafe {
    return put_regulator_status(valptr);
  }
}

pub fn unsafe_put_interface_failure(data: &Failure_Flag_i) -> bool {
  let mut value: Failure_Flag_i = *data;
  let valptr: *mut Failure_Flag_i = &mut value;
  unsafe {
    return put_interface_failure(valptr);
  }
}

pub fn unsafe_get_regulator_mode() -> Regulator_Mode {
  unsafe { 
    let data: *mut Regulator_Mode = &mut Regulator_Mode::default();
    get_regulator_mode(data);
    return *data;
  }
}

pub fn unsafe_get_lower_desired_tempWstatus() -> TempWstatus_i {
  unsafe {
    let data: *mut TempWstatus_i = &mut TempWstatus_i::default();
    get_lower_desired_tempWstatus(data);
    return *data;
  };
}

pub fn unsafe_get_upper_desired_tempWstatus() -> TempWstatus_i {
  unsafe { 
    let data: *mut TempWstatus_i = &mut TempWstatus_i::default();
    get_upper_desired_tempWstatus(data);
    return *data;
  };
}

pub fn unsafe_get_current_tempWstatus() -> TempWstatus_i {
  unsafe { 
    let data: *mut TempWstatus_i = &mut TempWstatus_i::default();
    get_current_tempWstatus(data);
    return *data;
  };
}

//////////////////////////////////////////////////////////////////////////////////
// Testing Verions
//////////////////////////////////////////////////////////////////////////////////

#[cfg(test)]
lazy_static::lazy_static! {
  // simulate the global C variables that point to the microkit shared memory regions.  In a full 
  // microkit system we would be able to mutate the shared memory for out ports since they're r/w, 
  // but we couldn't do that for in ports since they are read-only
  pub static ref OUT_upper_desired_temp: Mutex<Option<Temp_i>> = Mutex::new(None);
  pub static ref OUT_lower_desired_temp: Mutex<Option<Temp_i>> = Mutex::new(None);
  pub static ref OUT_displayed_temp: Mutex<Option<Temp_i>> = Mutex::new(None);
  pub static ref OUT_regulator_status: Mutex<Option<Status>> = Mutex::new(None);
  pub static ref OUT_interface_failure: Mutex<Option<Failure_Flag_i>> = Mutex::new(None);

  pub static ref IN_regulator_mode: Mutex<Option<Regulator_Mode>> = Mutex::new(None);
  pub static ref IN_lower_desired_tempWstatus: Mutex<Option<TempWstatus_i>> = Mutex::new(None);
  pub static ref IN_upper_desired_tempWstatus: Mutex<Option<TempWstatus_i>> = Mutex::new(None);
  pub static ref IN_current_tempWstatus: Mutex<Option<TempWstatus_i>> = Mutex::new(None);
}

#[cfg(test)] 
pub fn put_upper_desired_temp(data: *mut Temp_i) -> bool {
  unsafe {
    *OUT_upper_desired_temp.lock().unwrap() = Some(*data);
    return true;
  }
}

#[cfg(test)] 
pub fn put_lower_desired_temp(data: *mut Temp_i) -> bool {
  unsafe {
    *OUT_lower_desired_temp.lock().unwrap() = Some(*data);
    return true;
  }
}

#[cfg(test)]
pub fn put_displayed_temp(data: *mut Temp_i) -> bool {
  unsafe {
    *OUT_displayed_temp.lock().unwrap() = Some(*data);
    return true;
  }
}

#[cfg(test)]
pub fn put_regulator_status(data: *mut Status) -> bool {
  unsafe {
    *OUT_regulator_status.lock().unwrap() = Some(*data);
    return true;
  }
}

#[cfg(test)]
pub fn put_interface_failure(data: *mut Failure_Flag_i) -> bool {
  unsafe {
    *OUT_interface_failure.lock().unwrap() = Some(*data);
    return true;
  }
}

#[cfg(test)]
pub fn get_regulator_mode(data: *mut Regulator_Mode) -> bool {
  unsafe {
    *data = IN_regulator_mode.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_lower_desired_tempWstatus(data: *mut TempWstatus_i) -> bool {
  unsafe {
    *data = IN_lower_desired_tempWstatus.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_upper_desired_tempWstatus(data: *mut TempWstatus_i) -> bool {
  unsafe {
    *data = IN_upper_desired_tempWstatus.lock().unwrap().expect("Not expecting None");
    return true;
  }
}

#[cfg(test)]
pub fn get_current_tempWstatus(data: *mut TempWstatus_i) -> bool {
  unsafe {
    *data = IN_current_tempWstatus.lock().unwrap().expect("Not expecting None");
    return true;
  }
}
